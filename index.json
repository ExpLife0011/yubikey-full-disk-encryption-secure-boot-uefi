[{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1","title":"YubiKey Full Disk Encryption","content":"This repository contains a step-by-step tutorial to create a full disk encryption setup with two factor authentication (2FA) via YubiKey. It contains: YubiKey encrypted root (\/) and home (\/home) folder on separated partitions Encrypted \/boot partition UEFI Secure boot (self signed boot loader) Currently guides for: Arch Linux "},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1-1","title":"Why","content":"It took me several days to figure out how to set up a fully encrypted machine with 2FA. This guide should help others to get it done in minutes (hopefully). There exists a plenty bunch of tutorials but no one contains a step-by-step guide to get the above things done."},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/intro.html#1-2","title":"Documentation","content":"For the latest online documentation visit http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/. Refer the Quick Start section for a detailed explanation.Documentation is in the book tree, and can be compiled using bookdown or Docker$ docker run -it --rm -v $(pwd):\/app sandrokeil\/bookdown book\/bookdown.json $ docker run -it --rm -p 8080:8080 -v $(pwd):\/app php:7.1-cli php -S 0.0.0.0:8080 -t \/app\/doc\/html or run bookdown$ .\/vendor\/bin\/bookdown book\/bookdown.json $ php -S 0.0.0.0:8080 -t book\/html\/ Then browse to http:\/\/localhost:8080\/"},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/getting-started.html#3-1-1","title":"Getting Started","content":"For common stuff, the Arch Wiki is a good starting point. We need a bootable Arch Linux medium. Please take a look at the Arch Installtion Guide en \/ de.Ok, you've create a bootable Arch Linux medium, now it's time to boot into the Arch Linux UEFI system.German users should execute loadkeys de (QWERTZ keyboard layout) in the tty prompt first.Let's install minimal packages to get started with our full disk encryption with YubiKey.pacman -Sy yubikey-manager yubikey-personalization pcsc-tools libu2f-host make json-c cryptsetup Now we must start the smartcard servicesystemctl start pcscd.service and our connected YubiKey should be listed withykman list That's it, now let's go over to the next chapter which describes how to prepare disks."},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-disk.html#3-1-2","title":"Prepare Disks","content":"You have different choices to setup encryption. This chapter describes LVM on LUKS with encrypted boot partition. Because we want to unlock all volumes at once.List your disks with lsblk and run gdisk \/dev\/[your disk] e.g. gdisk \/dev\/nvme0n1. You can take a look at the gdisk Arch Wiki en \/ de It's crucial to use gdisk because GPT is needed for UEFI boot. Please create 4 partition like described in the Arch Wiki above with gdisk. Use the codes for the partition type. Don't format the partitions at this time, we will do it later with the YubiKey.The second partition contains the EFI System and must be of type FAT32. Format the second partition e.g. \/dev\/nvme0n1p2 with:mkfs.fat -F32 \/dev\/[your disk partition 2] The next chapter describes how to prepare the YubiKey."},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-yubikey.html#3-1-3","title":"Prepare YubiKey","content":"Download or mount yubikey-full-disk-encryption and install it in your Arch Linux Live environment. This is needed because we will format the 4rd partition with YubiKey.Open the yubikey-full-disk-encryption folder and run make.cd yubikey-full-disk-encryption make install Now it's time prepare the second slot of our YubiKey for the challenge response authentication. Touch will be also enabled.ykpersonalize -v -2 -ochal-resp -ochal-hmac -ohmac-lt64 -ochal-btn-trig -oserial-api-visible Open \/etc\/ykfde.conf and set YKFDE_CHALLENGE_SLOT=2 because we want to use the second slot. Set YKFDE_CHALLENGE_PASSWORD_NEEDED=1 so it asks for the password (2FA). Feel free to modify it tou your needs e.g. enable TRIM (but be warned, there are potential security implications) support. Please compare it carefully with the latest version you have downloaded. # Configuration for yubikey-full-disk-encryption. (\"\") means an empty value. ### *REQUIRED* ### # Set to non-empty value to use 'Automatic mode with stored challenge (1FA)'. #YKFDE_CHALLENGE=\"\" # Use 'Manual mode with secret challenge (2FA)'. YKFDE_CHALLENGE_PASSWORD_NEEDED=\"1\" # Choose YubiKey slot configured for 'HMAC-SHA1 Challenge-Response' mode. Possible values are \"1\" or \"2\". YKFDE_CHALLENGE_SLOT=\"2\" ### OPTIONAL ### # Set partition UUID. Leave empty to use 'cryptdevice' kernel parameter. #YKFDE_DISK_UUID=\"\" # Set LUKS encrypted volume name. Leave empty to use 'cryptdevice' kernel parameter. #YKFDE_LUKS_NAME=\"\" # If left empty this will be set as \"\/dev\/disk\/by-uuid\/$YKFDE_DISK_UUID\" -- device to unlock with 'cryptsetup luksOpen'. #YKFDE_LUKS_DEV=\"\" # Optional flags passed to 'cryptsetup luksOpen'. Example: \"--allow-discards\" for TRIM support. Leave empty to use cryptdevice kernel parameter. #YKFDE_LUKS_OPTIONS=\"\" # Number of times to assemble passphrase and run 'cryptsetup luksOpen'. Defaults to \"5\". #YKFDE_CRYPTSETUP_TRIALS=\"5\" # Number of seconds to wait for inserting YubiKey, \"-1\" means 'unlimited'. Defaults to \"30\". #YKFDE_CHALLENGE_YUBIKEY_INSERT_TIMEOUT=\"30\" # Number of seconds passed to 'sleep' after succesful decryption. Defaults to empty, meaning NO sleep. #YKFDE_SLEEP_AFTER_SUCCESSFUL_CRYPTSETUP=\"\" # Enable verbose output. It will print all secrets to terminal. Use only for debugging. #DBG=\"1\" Next step is to format the 4rd partition. You can modify the arguments if you know what you are doing. Ensure that you use the 4rd partition e.g. nvme0n1p4ykfde-format --cipher aes-xts-plain64 --key-size 512 --hash sha256 --iter-time 5000 --type luks2 \/dev\/[device 4rd partition] ykfde-open -d \/dev\/[device 4rd partition] -n cryptlvm Display the crypt volume with ls \/dev\/mapper. Next step is to preparing the logical volumes for \/ and \/home directory.mount \/dev\/MyVolGroup\/root \/mnt mkdir \/mnt\/home mount \/dev\/MyVolGroup\/home \/mnt\/home "},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/prepare-volumes.html#3-1-4","title":"Prepare Volumes","content":"TBD"},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/install-arch.html#3-1-5","title":"Install Arch Linux","content":"TBD"},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/secure-boot.html#3-1-6","title":"Setup secure boot","content":"TBD"},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/yubikey-login.html#3-1-7","title":"Enable YubiKey Login","content":"TBD"},{"id":"http:\/\/sandrokeil.github.io\/yubikey-full-disk-encryption-secure-boot-uefi\/guides\/arch-linux\/minimal-gnome.html#3-1-8","title":"Install minimal GNOME desktop","content":"TBD"}]